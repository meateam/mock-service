// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mock.proto

package mock

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetMockByIDRequest struct {
	MockID               string   `protobuf:"bytes,1,opt,name=mockID,proto3" json:"mockID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMockByIDRequest) Reset()         { *m = GetMockByIDRequest{} }
func (m *GetMockByIDRequest) String() string { return proto.CompactTextString(m) }
func (*GetMockByIDRequest) ProtoMessage()    {}
func (*GetMockByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa4806c90f7156d, []int{0}
}

func (m *GetMockByIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMockByIDRequest.Unmarshal(m, b)
}
func (m *GetMockByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMockByIDRequest.Marshal(b, m, deterministic)
}
func (m *GetMockByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMockByIDRequest.Merge(m, src)
}
func (m *GetMockByIDRequest) XXX_Size() int {
	return xxx_messageInfo_GetMockByIDRequest.Size(m)
}
func (m *GetMockByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMockByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMockByIDRequest proto.InternalMessageInfo

func (m *GetMockByIDRequest) GetMockID() string {
	if m != nil {
		return m.MockID
	}
	return ""
}

type GetMockByIDResponse struct {
	MockID               string   `protobuf:"bytes,1,opt,name=mockID,proto3" json:"mockID,omitempty"`
	Mocker               string   `protobuf:"bytes,2,opt,name=mocker,proto3" json:"mocker,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMockByIDResponse) Reset()         { *m = GetMockByIDResponse{} }
func (m *GetMockByIDResponse) String() string { return proto.CompactTextString(m) }
func (*GetMockByIDResponse) ProtoMessage()    {}
func (*GetMockByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa4806c90f7156d, []int{1}
}

func (m *GetMockByIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMockByIDResponse.Unmarshal(m, b)
}
func (m *GetMockByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMockByIDResponse.Marshal(b, m, deterministic)
}
func (m *GetMockByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMockByIDResponse.Merge(m, src)
}
func (m *GetMockByIDResponse) XXX_Size() int {
	return xxx_messageInfo_GetMockByIDResponse.Size(m)
}
func (m *GetMockByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMockByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMockByIDResponse proto.InternalMessageInfo

func (m *GetMockByIDResponse) GetMockID() string {
	if m != nil {
		return m.MockID
	}
	return ""
}

func (m *GetMockByIDResponse) GetMocker() string {
	if m != nil {
		return m.Mocker
	}
	return ""
}

type MockObject struct {
	MockID               string   `protobuf:"bytes,1,opt,name=mockID,proto3" json:"mockID,omitempty"`
	Mocker               string   `protobuf:"bytes,2,opt,name=mocker,proto3" json:"mocker,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MockObject) Reset()         { *m = MockObject{} }
func (m *MockObject) String() string { return proto.CompactTextString(m) }
func (*MockObject) ProtoMessage()    {}
func (*MockObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_6fa4806c90f7156d, []int{2}
}

func (m *MockObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MockObject.Unmarshal(m, b)
}
func (m *MockObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MockObject.Marshal(b, m, deterministic)
}
func (m *MockObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MockObject.Merge(m, src)
}
func (m *MockObject) XXX_Size() int {
	return xxx_messageInfo_MockObject.Size(m)
}
func (m *MockObject) XXX_DiscardUnknown() {
	xxx_messageInfo_MockObject.DiscardUnknown(m)
}

var xxx_messageInfo_MockObject proto.InternalMessageInfo

func (m *MockObject) GetMockID() string {
	if m != nil {
		return m.MockID
	}
	return ""
}

func (m *MockObject) GetMocker() string {
	if m != nil {
		return m.Mocker
	}
	return ""
}

func init() {
	proto.RegisterType((*GetMockByIDRequest)(nil), "mock.GetMockByIDRequest")
	proto.RegisterType((*GetMockByIDResponse)(nil), "mock.GetMockByIDResponse")
	proto.RegisterType((*MockObject)(nil), "mock.MockObject")
}

func init() { proto.RegisterFile("mock.proto", fileDescriptor_6fa4806c90f7156d) }

var fileDescriptor_6fa4806c90f7156d = []byte{
	// 151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xca, 0xcd, 0x4f, 0xce,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x74, 0xb8, 0x84, 0xdc, 0x53,
	0x4b, 0x7c, 0xf3, 0x93, 0xb3, 0x9d, 0x2a, 0x3d, 0x5d, 0x82, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b,
	0x84, 0xc4, 0xb8, 0xd8, 0x40, 0xb2, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50,
	0x9e, 0x92, 0x2b, 0x97, 0x30, 0x8a, 0xea, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x5c, 0xca, 0x61,
	0xe2, 0xa9, 0x45, 0x12, 0x4c, 0x08, 0xf1, 0xd4, 0x22, 0x25, 0x1b, 0x2e, 0x2e, 0x90, 0x19, 0xfe,
	0x49, 0x59, 0xa9, 0xc9, 0x25, 0xa4, 0xea, 0x36, 0xf2, 0xe1, 0x62, 0x01, 0xe9, 0x16, 0x72, 0xe1,
	0xe2, 0x46, 0x72, 0x8c, 0x90, 0x84, 0x1e, 0xd8, 0x73, 0x98, 0xbe, 0x91, 0x92, 0xc4, 0x22, 0x03,
	0x71, 0xb9, 0x12, 0x43, 0x12, 0x1b, 0x38, 0x34, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x99,
	0xfa, 0x57, 0x37, 0x1b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MockClient is the client API for Mock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MockClient interface {
	GetMockByID(ctx context.Context, in *GetMockByIDRequest, opts ...grpc.CallOption) (*GetMockByIDResponse, error)
}

type mockClient struct {
	cc *grpc.ClientConn
}

func NewMockClient(cc *grpc.ClientConn) MockClient {
	return &mockClient{cc}
}

func (c *mockClient) GetMockByID(ctx context.Context, in *GetMockByIDRequest, opts ...grpc.CallOption) (*GetMockByIDResponse, error) {
	out := new(GetMockByIDResponse)
	err := c.cc.Invoke(ctx, "/mock.Mock/GetMockByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MockServer is the server API for Mock service.
type MockServer interface {
	GetMockByID(context.Context, *GetMockByIDRequest) (*GetMockByIDResponse, error)
}

// UnimplementedMockServer can be embedded to have forward compatible implementations.
type UnimplementedMockServer struct {
}

func (*UnimplementedMockServer) GetMockByID(ctx context.Context, req *GetMockByIDRequest) (*GetMockByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMockByID not implemented")
}

func RegisterMockServer(s *grpc.Server, srv MockServer) {
	s.RegisterService(&_Mock_serviceDesc, srv)
}

func _Mock_GetMockByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMockByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MockServer).GetMockByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mock.Mock/GetMockByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MockServer).GetMockByID(ctx, req.(*GetMockByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mock_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mock.Mock",
	HandlerType: (*MockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMockByID",
			Handler:    _Mock_GetMockByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mock.proto",
}
